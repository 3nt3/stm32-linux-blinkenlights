{"$message_type":"diagnostic","message":"can't find crate for `std`","code":{"code":"E0463","explanation":"A crate was declared but cannot be found.\n\nErroneous code example:\n\n```compile_fail,E0463\nextern crate foo; // error: can't find crate\n```\n\nYou need to link your code to the relevant crate in order to be able to use it\n(through Cargo or the `-L` option of rustc, for example).\n\n## Common causes\n\n- The crate is not present at all. If using Cargo, add it to `[dependencies]`\n  in Cargo.toml.\n- The crate is present, but under a different name. If using Cargo, look for\n  `package = ` under `[dependencies]` in Cargo.toml.\n\n## Common causes for missing `std` or `core`\n\n- You are cross-compiling for a target which doesn't have `std` prepackaged.\n  Consider one of the following:\n  + Adding a pre-compiled version of std with `rustup target add`\n  + Building std from source with `cargo build -Z build-std`\n  + Using `#![no_std]` at the crate root, so you won't need `std` in the first\n    place.\n- You are developing the compiler itself and haven't built libstd from source.\n  You can usually build it with `x.py build library/std`. More information\n  about x.py is available in the [rustc-dev-guide].\n\n[rustc-dev-guide]: https://rustc-dev-guide.rust-lang.org/building/how-to-build-and-run.html#building-the-compiler\n"},"level":"error","spans":[{"file_name":"/home/ente/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-io-0.3.31/src/lib.rs","byte_start":787,"byte_end":804,"line_start":23,"line_end":23,"column_start":1,"column_end":18,"is_primary":true,"text":[{"text":"extern crate std;","highlight_start":1,"highlight_end":18}],"label":"can't find crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the `thumbv7m-none-eabi` target may not support the standard library","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0463]\u001b[0m\u001b[0m\u001b[1m: can't find crate for `std`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/ente/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-io-0.3.31/src/lib.rs:23:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mextern crate std;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcan't find crate\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the `thumbv7m-none-eabi` target may not support the standard library\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved imports `io::Error`, `io::ErrorKind`, `io::IoSlice`, `io::IoSliceMut`, `io::Result`, `io::SeekFrom`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/home/ente/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-io-0.3.31/src/lib.rs","byte_start":1256,"byte_end":1261,"line_start":38,"line_end":38,"column_start":18,"column_end":23,"is_primary":true,"text":[{"text":"    pub use io::{Error, ErrorKind, IoSlice, IoSliceMut, Result, SeekFrom};","highlight_start":18,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/ente/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-io-0.3.31/src/lib.rs","byte_start":1263,"byte_end":1272,"line_start":38,"line_end":38,"column_start":25,"column_end":34,"is_primary":true,"text":[{"text":"    pub use io::{Error, ErrorKind, IoSlice, IoSliceMut, Result, SeekFrom};","highlight_start":25,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/ente/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-io-0.3.31/src/lib.rs","byte_start":1274,"byte_end":1281,"line_start":38,"line_end":38,"column_start":36,"column_end":43,"is_primary":true,"text":[{"text":"    pub use io::{Error, ErrorKind, IoSlice, IoSliceMut, Result, SeekFrom};","highlight_start":36,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/ente/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-io-0.3.31/src/lib.rs","byte_start":1283,"byte_end":1293,"line_start":38,"line_end":38,"column_start":45,"column_end":55,"is_primary":true,"text":[{"text":"    pub use io::{Error, ErrorKind, IoSlice, IoSliceMut, Result, SeekFrom};","highlight_start":45,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/ente/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-io-0.3.31/src/lib.rs","byte_start":1295,"byte_end":1301,"line_start":38,"line_end":38,"column_start":57,"column_end":63,"is_primary":true,"text":[{"text":"    pub use io::{Error, ErrorKind, IoSlice, IoSliceMut, Result, SeekFrom};","highlight_start":57,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/ente/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-io-0.3.31/src/lib.rs","byte_start":1303,"byte_end":1311,"line_start":38,"line_end":38,"column_start":65,"column_end":73,"is_primary":true,"text":[{"text":"    pub use io::{Error, ErrorKind, IoSlice, IoSliceMut, Result, SeekFrom};","highlight_start":65,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved imports `io::Error`, `io::ErrorKind`, `io::IoSlice`, `io::IoSliceMut`, `io::Result`, `io::SeekFrom`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/ente/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-io-0.3.31/src/lib.rs:38:18\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub use io::{Error, ErrorKind, IoSlice, IoSliceMut, Result, SeekFrom};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 2 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 2 previous errors\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0432, E0463.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0432, E0463.\u001b[0m\n"}
{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0432`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0432`.\u001b[0m\n"}
